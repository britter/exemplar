import org.gradle.work.ChangeType
import org.gradle.work.Incremental
import org.gradle.work.InputChanges

def inputsDir = layout.projectDirectory.dir("inputs")

task originalInputs() {
    doLast {
        inputsDir.asFile.mkdir()
        inputsDir.file('1.txt').asFile.text = 'Content for file 1.'
        inputsDir.file('2.txt').asFile.text = 'Content for file 2.'
        inputsDir.file('3.txt').asFile.text = 'Content for file 3.'
    }
}

// START SNIPPET updated-inputs
task updateInputs() {
    doLast {
        inputsDir.file('1.txt').asFile.text = 'Changed content for existing file 1.'
        inputsDir.file('4.txt').asFile.text = 'Content for new file 4.'
    }
}
// END SNIPPET updated-inputs

// START SNIPPET removed-input
task removeInput() {
    doLast {
        inputsDir.file('3.txt').asFile.delete()
    }
}
// END SNIPPET removed-input

// START SNIPPET removed-output
task removeOutput() {
    doLast {
        layout.buildDirectory.file('outputs/1.txt').get().asFile.delete()
    }
}
// END SNIPPET removed-output

// START SNIPPET reverse
task incrementalReverse(type: IncrementalReverseTask) {
    inputDir = inputsDir.asFileTree
    outputDir = layout.buildDirectory.dir('outputs')
    inputProperty = project.properties['taskInputProperty'] ?: 'original'
}
// END SNIPPET reverse

// START SNIPPET incremental-task
class IncrementalReverseTask extends DefaultTask {
    @InputFiles
    @SkipWhenEmpty
    FileCollection inputDir

    @OutputDirectory
    Provider<Directory> outputDir

    @Input
    def inputProperty

    @TaskAction
    void execute(InputChanges inputs) {
        println inputs.incremental ? 'CHANGED inputs considered out of date'
                                   : 'ALL inputs considered out of date'
        // START SNIPPET handle-non-incremental-inputs
        if (!inputs.incremental)
            project.delete(outputDir.get().asFile.listFiles())
        // END SNIPPET handle-non-incremental-inputs

        if (inputs.incremental) {
            inputs.getFileChanges(inputDir).each { change ->
                // START SNIPPET out-of-date-inputs
                if (change.changeType == ChangeType.MODIFIED && change.file.file) {
                    println "out of date: ${change.file.name}"
                    def targetFile = new File(outputDir.get().asFile, change.file.name)
                    targetFile.text = change.file.text.reverse()
                }
                // END SNIPPET out-of-date-inputs
                // START SNIPPET added-inputs
                if (change.changeType == ChangeType.ADDED && change.file.file) {
                    println "added: ${change.file.name}"
                    def targetFile = new File(outputDir.get().asFile, change.file.name)
                    targetFile.text = change.file.text.reverse()
                }
                // END SNIPPET added-inputs

                // START SNIPPET removed-inputs
                if (change.changeType == ChangeType.REMOVED) {
                    println "removed: ${change.file.name}"
                    def targetFile = new File(outputDir.get().asFile, change.file.name)
                    targetFile.delete()
                }
                // END SNIPPET removed-inputs
            }
        }
    }
}
// END SNIPPET incremental-task
